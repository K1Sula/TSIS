import re
with open('row.txt', 'r', encoding = "utf-8") as f:
    text = f.read()


print('\n\nFOR snake case!')
answer1 = re.sub(r'[\W+]', '_' , text)
print(answer1.lower())


print('\n\nFOR camel case!')

def reveRse(text):
    words = re.findall(r'\b\w+\b' , text)
    string1 = ""
    for word in words:
        pattern = r'\b([a-zA-Z])|\b([а-яА-Я])'
        if re.search(pattern, word):
            ex =""
            s1 = word[0].upper()
            ex += s1
            s2 = word[1:].lower()
            ex += s2
            string1 += ex
        else:
            word = word.lower()
            string1 += word
    return string1

print(reveRse(text))



# Example 2 way for solution
# def capitalize(match):
#     return match.group(1).upper()

# def to_camel_case(text):
#     return re.sub(r'(?:^|_)([a-zA-Z])', capitalize, text)  # ?: указывает на то, что группа является некапирующей.


# snake_case_text = "hello_world_example"
# camel_case_text = to_camel_case(snake_case_text)
# print(camel_case_text)  # Вывод: helloWorldExample



# Вот пример:

# (foo): Эта скобочная группа сохраняет совпадение с текстом "foo".

# (?:foo): Эта некапирующая скобочная группа также ищет "foo", но не сохраняет это совпадение.

# Таким образом, (?:^|_) в регулярном выражении соответствует началу строки или символу подчёркивания, но не сохраняет это совпадение для последующего использования.





# (foo): Это скобочная группа, которая соответствует тексту "foo" и сохраняет это 
# совпадение для последующего использования. Например, если регулярное выражение содержит (foo), 
# оно найдет строку, содержащую "foo", и сохранит "foo" для дальнейшего использования.


# (?:foo): Это так называемая некапирующая скобочная группа. Она также ищет "foo", но 
#  не сохраняет это совпадение для последующего использования. Это означает, что если 
#  регулярное выражение содержит (?:foo), оно также найдет строку, содержащую "foo", 
#                                 но не сохранит "foo" для дальнейшего использования.

# (?:^|_): Это пример некапирующей скобочной группы в регулярном выражении. Она 
#  соответствует либо началу строки ^, либо символу подчеркивания _, но не сохраняет
#    это совпадение для последующего использования. Таким образом, если регулярное 
#    выражение содержит (?:^|_), оно найдет либо начало строки, либо символ подчеркивания, 
# но не сохранит их для дальнейшего использования.